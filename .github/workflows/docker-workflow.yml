name: Push To Yandex Cloud CR

on:
  push:
    branches:
      main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_CREDS }}
      - name: Build, tag, and push image to Yandex Cloud Container Registry
        env:
          CR_REGISTRY: ${{ vars.CR_REGISTRY }}
          CR_REPOSITORY: ${{ vars.CR_REPOSITORY }}
        run: |
          docker build -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest --target prod .
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Deploy Serverless Container
        id: deploy-sls-container
        uses: yc-actions/yc-sls-container-deploy@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_CREDS }}
          container-name: ${{ vars.CONTAINER_NAME }}
          folder-id: ${{ vars.FOLDER_ID }}
          revision-service-account-id: ${{ vars.SERVICE_ACCOUNT_ID }}
          revision-cores: 1
          revision-memory: 512Mb
          revision-core-fraction: 100
          revision-concurrency: 1
          revision-image-url: cr.yandex/${{ vars.CR_REGISTRY }}/${{ vars.CR_REPOSITORY }}:latest
          revision-execution-timeout: 10
          revision-env: |
            DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            DISCORD_CHANNELS=${{ vars.DISCORD_CHANNELS }}
            TELEGRAM_CHANNELS=${{ vars.TELEGRAM_CHANNELS }}
      - name: IAM Token
        id: iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_CREDS }}
      - name: Trigger Container
        id: trigger
        run: |
          bash -c 'while true; do output=$(curl -H "Authorization: Bearer ${{ steps.iam-token.outputs.token }}" https://serverless-containers.api.cloud.yandex.net/containers/v1/containers\?folder_id\=${{ vars.FOLDER_ID }} | jq ".containers[] | select(.id == "${{ steps.deploy-sls-container.outputs.id }}").status"); if [echo $output | grep -q "ACTIVE"]; then echo "Container is ACTIVE. Exiting with code 0."; exit 0; elif [echo $output | grep -q "CREATING"]; then echo "Container is still CREATING. Waiting 1 second."; sleep 1; else; echo "Container is not ACTIVE or CREATING. Exiting with code 1."; exit 1; fi; done'
          curl -H "Authorization: Bearer ${{ steps.iam-token.outputs.token }}" -m 20 https://${{ steps.deploy-sls-container.outputs.id }}.containers.yandexcloud.net || :
